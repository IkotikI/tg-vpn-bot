package xui_service

func (s *XUIService) _SubscriptionLink(ctx context.Context, sub *storage.Subscription) (link string, err error) {
	defer func() { e.WrapIfErr("can't generate subscription link", err) }()

	if sub.UserID == 0 {
		return "", ErrZeroUserID
	}

	if sub.ServerID == 0 {
		return "", ErrZeroServerID
	}

	xui, err := s.xuiClientInstance(ctx, sub.ServerID)
	if err != nil {
		return nil, e.Wrap("can't get xui client instance", err)
	}

	settings, err := xui.GetAllSettings(ctx)
	if err != nil {
		return nil, e.Wrap("can't get xui settings", err)
	}

	inbound, err := xui.GetInbound(ctx, s.inboundID)
	if err != nil {
		return nil, e.Wrap("can't get inbound")
	}

	client, err := s.GetClient(ctx, inbound, sub.UserID)
	if err != nil {
		return nil, e.Wrap("can't get client by ids", err)
	}

	protocol := inbound.Protocol
	host := inbound.Address
	port := inbound.Port

	linkArgs := map[string]string{
		"type": inbound.
		"security": client.Security,
	}

	linkArgsStr := strings.Join([]string{"type=tcp"})
	link := fmt.Sprintf("%s://%s@%s:%d?%s",protocol, host, port, linkArgsStr,  )
	 


	// ./web/html/xui/inbound_info_modal.html
	// js
	genSubLink(subID) {
        return app.subSettings.subURI + subID;
      },
      genSubJsonLink(subID) {
        return app.subSettings.subJsonURI + subID;
      },
	// js
}

